{"version":3,"sources":["assets/noImage.jpg","Components/SearchBar.js","Components/firebase.js","Components/CreateList.js","Components/VoteButtons.js","Components/Slider.js","Components/AddTitle.js","Components/ShowDetails.js","Components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","handleChange","e","setState","userInput","target","value","handleSubmit","preventDefault","props","callApi","state","className","onSubmit","this","action","htmlFor","onChange","name","type","placeholder","icon","faSearch","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CreateList","createList","database","ref","inputTitle","push","title","VoteButtons","handleUpvote","currentRating","listTitle","child","showKey","newData","on","response","data","val","set","handleDownvote","onClick","faArrowCircleUp","faArrowCircleDown","Slider","expandList","document","getElementsByClassName","classList","toggle","querySelector","handleDelete","list","key","dbRef","remove","myListTitles","myLists","expand","listTitlePush","showPush","next","actualListTitle","listTitleRecord","rating","sortedPush","sort","a","b","map","s","faSortDown","faPlus","item","AddTitle","showTitle","selectedList","listTitleArray","length","selected","disabled","ShowDetails","createSummary","__html","showDetails","summary","closeModal","id","genre","src","image","alt","dangerouslySetInnerHTML","Gallery","relevantShows","show","add","showRating","App","search","axios","method","url","responseType","params","q","then","res","searchResults","medium","average","language","genres","noImage","error","console","log","showMyLists","faBars","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5f19d61b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImage.aaa9fb02.jpg\";","import React, {Component} from 'react';\r\n\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass SearchBar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: \"\",\r\n    };\r\n  }\r\n\r\n  // Used to take user input(TV show name) from search bar\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Used to call to API using user input(TV show name) as query\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.callApi(this.state.userInput);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          className=\"showTitleSearch\"\r\n          onSubmit={this.handleSubmit}\r\n          action=\"submit\"\r\n        >\r\n          <label className=\"sr-only\" htmlFor=\"searchByName\">\r\n            Search TV Show By Name:\r\n          </label>\r\n          <input\r\n            value={this.state.userInput}\r\n            onChange={this.handleChange}\r\n            name=\"searchByName\"\r\n            type=\"text\"\r\n            placeholder=\"Search TV Show By Name\"\r\n          />\r\n          <button className=\"inputButton\">\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default SearchBar;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig ={\r\n  apiKey: \"AIzaSyBCUsX2ILvXh1sITHinQJ9PHk5nGiJ90fM\",\r\n  authDomain: \"binge-watch-list.firebaseapp.com\",\r\n  databaseURL: \"https://binge-watch-list.firebaseio.com\",\r\n  projectId: \"binge-watch-list\",\r\n  storageBucket: \"binge-watch-list.appspot.com\",\r\n  messagingSenderId: \"665131961000\",\r\n  appId: \"1:665131961000:web:23bbca1d60f97622fad09d\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass CreateList extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      inputTitle:''\r\n    }\r\n  }\r\n  \r\n  createList = (e) => {\r\n    e.preventDefault();\r\n    // push the user's submitted list title up to firebase \r\n    const createdList = firebase.database().ref(this.state.inputTitle);\r\n    createdList.push({\r\n      title: 'Start adding in your shows!'\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    // retrieve the list title that the user submits and use it to set state\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <form className='createList' onSubmit={this.createList} action=\"submit\">\r\n        <label className='sr-only' htmlFor=\"inputTitle\">Name your new list</label>\r\n        <input name=\"inputTitle\" className='createList' placeholder=\"Name your new list\" onChange={this.handleChange} value={this.state.inputTitle} type=\"text\"/>\r\n        <button className=\"inputButton\">Create List</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CreateList;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase';\r\n\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowCircleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { faArrowCircleDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass VoteButtons extends Component {\r\n  // Used to vote up TV show by 1\r\n  handleUpvote = () => {\r\n    const currentRating = firebase\r\n      .database()\r\n      .ref(this.props.listTitle)\r\n      .child(this.props.showKey)\r\n      .child(\"rating\");\r\n\r\n    let newData = null;\r\n\r\n    // to ensure that shows cannot be upvoted to over 10\r\n    currentRating.on(\"value\", (response) => {\r\n      let data = response.val();\r\n      if (data < 10) {\r\n        newData = data + 1;\r\n      } else {\r\n        newData = 10;\r\n      }\r\n    });\r\n\r\n    currentRating.set(newData);\r\n  };\r\n\r\n  // Used to down vote TV show by 1\r\n  handleDownvote = () => {\r\n    const currentRating = firebase\r\n      .database()\r\n      .ref(this.props.listTitle)\r\n      .child(this.props.showKey)\r\n      .child(\"rating\");\r\n\r\n    let newData = null;\r\n\r\n    // to ensure that shows cannot be downvoted to under 0\r\n    currentRating.on(\"value\", (response) => {\r\n      let data = response.val();\r\n      if (data > 0) {\r\n        newData = data - 1;\r\n      } else {\r\n        newData = 0;\r\n      }\r\n    });\r\n\r\n    currentRating.set(newData);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <button className=\"upvote\" onClick={this.handleUpvote}>\r\n          <FontAwesomeIcon icon={faArrowCircleUp} />\r\n        </button>\r\n        <button className=\"downvote\" onClick={this.handleDownvote}>\r\n          <FontAwesomeIcon icon={faArrowCircleDown} />\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VoteButtons;","import React, {Component, Fragment} from 'react';\r\nimport firebase from './firebase';\r\nimport CreateList from './CreateList';\r\nimport VoteButtons from './VoteButtons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Slider extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      myListTitles:[],\r\n      myLists:[],\r\n      expand: true\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    // reference firebase\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (response) => {\r\n\r\n    // get values from firebase database\r\n      const data = response.val();\r\n\r\n    // new array for list titles\r\n      const listTitlePush = [];\r\n\r\n    // new array for shows\r\n      const showPush = [];\r\n\r\n    // pushing relevant info for list titles and shows into respective arrays\r\n      for (let key in data) {\r\n        let listTitle = key\r\n        let next = data[key]\r\n          listTitlePush.push({\r\n            actualListTitle: listTitle,\r\n          })\r\n        for (let key in next) {\r\n          showPush.push({\r\n            listTitleRecord: listTitle,\r\n            title: next[key]['title'],\r\n            rating: next[key]['rating'],\r\n            showKey: key\r\n          })\r\n        }\r\n      }\r\n      \r\n      // used to order the shows by rating\r\n      const sortedPush = showPush.sort((a, b) => (a.rating > b.rating) ? -1 : 1);\r\n\r\n      this.setState({\r\n        myListTitles: listTitlePush,\r\n        myLists: sortedPush,\r\n      })\r\n    })\r\n  }  \r\n\r\n  // If the small down arrow is clicked expand or minimize the list of shows\r\n    expandList = (listTitle) => {\r\n    for (let t of document.getElementsByClassName(listTitle)) {\r\n      t.classList.toggle('show');\r\n    }\r\n    document.querySelector(`.arrow${listTitle}`).classList.toggle('show')\r\n  }\r\n\r\n  // Used to delete a show or a list, depending on what items are passed\r\n  handleDelete = (list, key=null) => {\r\n    const dbRef = firebase.database().ref(list);\r\n    // If no key is passed in, delete the list\r\n    if (key === null) {\r\n      dbRef.remove();\r\n    } else {\r\n      // If a key was passed, delete the child item\r\n      dbRef.child(key).remove();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h2 className=\"sliderTitle\">My TV Show Lists</h2>\r\n        <CreateList />\r\n      <div className=\"gridContainer\">\r\n        {/* map through array of list titles to return individual list titles */}\r\n        {this.state.myListTitles.map((s) => {\r\n          return (\r\n            <div className=\"sliderList\">\r\n              <div className=\"listTitleContainer\">\r\n                <button className='collapseList' onClick={() => this.expandList(s.actualListTitle)}><FontAwesomeIcon className={`collapseList arrow${s.actualListTitle}`} icon={faSortDown} /></button>\r\n                <h2>{s.actualListTitle}</h2>\r\n                <button className=\"delete\" onClick={() => this.handleDelete(s.actualListTitle)}><FontAwesomeIcon icon={faPlus} /></button>\r\n              </div>\r\n              {/* map through array of shows and match them with respsective list titles to return shows within relevant list */}\r\n              {this.state.myLists.map((item) => {\r\n                if (item.listTitleRecord === s.actualListTitle && item.title != 'Start adding in your shows!') {\r\n                  return (\r\n                    <li key={item.showKey} className={`tvList ${s.actualListTitle}`}>\r\n                      <h3>{item.title}</h3>\r\n                      <p>&#x2605; {item.rating}</p><button className=\"delete\" onClick={() => this.handleDelete(s.actualListTitle, item.showKey)}><FontAwesomeIcon icon={faPlus} /></button>\r\n                      <VoteButtons showKey={item.showKey} listTitle={s.actualListTitle}/>\r\n                    </li>\r\n                  )\r\n                }\r\n              })}\r\n            </div>  \r\n          )\r\n        })}\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider;","import React,{Component} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass AddTitle extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state={\r\n      myListTitles: [],\r\n      selectedList: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // referencing firebase\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // create array for list titles\r\n    const listTitleArray = [];\r\n\r\n    dbRef.on('value', (response) => {\r\n      // clear the array\r\n      listTitleArray.length = 0;\r\n\r\n      // push each available list title into the new array\r\n      const data = response.val();\r\n      for (let key in data) {\r\n        listTitleArray.push({\r\n          listTitle: key\r\n        })\r\n      }\r\n      \r\n      this.setState({\r\n        myListTitles: listTitleArray\r\n      })\r\n    })  \r\n  }\r\n\r\n  handleChange = (e) => {\r\n    // retrieve the tv show the user wants to add to a list and push respective info to firebase at intended list as per user's intentions\r\n    if (e.target.value !== '') {\r\n    const pushedList = firebase.database().ref(e.target.value)\r\n        pushedList.push({\r\n          rating: 0,\r\n          title: this.props.showTitle\r\n        })\r\n      }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form>\r\n        <select className={''} onChange={this.handleChange}>\r\n        <option selected disabled value={''}>Add to List</option>   \r\n          {/* map through array of user inputted list titles and return them to the dropdown menu so that users can add tv shows to lists */} \r\n          {this.state.myListTitles.map((item) => {\r\n              return (\r\n                <option value={item.listTitle}>{item.listTitle}</option>\r\n              )\r\n            })\r\n          }\r\n        </select>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTitle;","import React, {Component, Fragment} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass ShowDetails extends Component {\r\n  // Used to create summary from information in response from API call\r\n  createSummary = () => {\r\n    return { __html: this.props.showDetails.summary };\r\n  };\r\n\r\n  // Used to close modal containing TV show information\r\n  closeModal = () => {\r\n    document.querySelector(`.detailsModal.show`).classList.remove(\"show\");\r\n    document.querySelector(`.modalBackground.show`).classList.remove(\"show\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"modalBackground\"></div>\r\n        <div className={`detailsModal modal${this.props.showDetails.id}`}>\r\n          <span className=\"closeModal\" onClick={this.closeModal}>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n          </span>\r\n          <h2>{this.props.showDetails.title}</h2>\r\n          <h3>&#x2605; {this.props.showDetails.rating}/10</h3>\r\n          <p className=\"modal\">{this.props.showDetails.genre}</p>\r\n          <img\r\n            src={this.props.showDetails.image}\r\n            alt={`Poster for ${this.props.showDetails.title}`}\r\n          ></img>\r\n          <div\r\n            className=\"modal\"\r\n            dangerouslySetInnerHTML={this.createSummary()}\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowDetails;","import React, { Component, Fragment } from 'react';\r\nimport '../styles/Sass/App.scss';\r\nimport AddTitle from './AddTitle';\r\nimport ShowDetails from './ShowDetails';\r\n\r\nclass Gallery extends Component {\r\n\r\n    // to append relevant show details to page and allow for modals\r\n    render() {\r\n        return (\r\n            <Fragment>    \r\n                <ul className=\"searchResuts\">\r\n                    {   this.props.relevantShows.length === 0 ? \r\n                        (<p className=\"noResults\">No results found.</p>) :\r\n                        (this.props.relevantShows.map((show) => {\r\n                            return (\r\n                                <Fragment>                 \r\n                                    <ShowDetails showDetails={show}/>\r\n                                    <li key={show.id}>\r\n                                        <button onClick={() => {document.querySelector(`.modal${show.id}`).classList.add('show');document.querySelector(`.modalBackground`).classList.add('show')}} className=\"tvImgButton\">\r\n                                            <img\r\n                                            src={show.image}\r\n                                            alt={`Poster for ${show.title}`}\r\n                                            ></img>\r\n                                        </button>\r\n                                        <p className=\"tv Title\">{show.title}</p>\r\n                                        <AddTitle\r\n                                        showTitle={show.title}\r\n                                        showRating={show.rating}\r\n                                        />\r\n                                    </li>\r\n                                </Fragment>\r\n                            );\r\n                        }))\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Gallery;\r\n\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport './styles/Sass/App.scss';\r\nimport SearchBar from './Components/SearchBar'\r\nimport Slider from './Components/Slider';\r\nimport Gallery from './Components/Gallery';\r\nimport noImage from './assets/noImage.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      relevantShows: []\r\n    }\r\n  }\r\n\r\n  // Call to show gallery to user on load\r\n  componentDidMount() {\r\n    this.callApi('Survivor');\r\n  }\r\n\r\n  // Main API call\r\n  callApi = (search) => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"https://api.tvmaze.com/search/shows\",\r\n      responseType: \"json\",\r\n      params: {\r\n        q: search,\r\n      },\r\n    }).then((res) => {\r\n      // Take response and break down into more-usable structure\r\n      const data = res.data;\r\n      const searchResults = [];\r\n      for (let key in data) {\r\n        if(data[key].show.image !== null) {\r\n          searchResults.push({\r\n            id: data[key].show.id,\r\n            title: data[key].show.name,\r\n            image: data[key].show.image.medium,\r\n            summary: data[key].show.summary,\r\n            rating: data[key].show.rating.average,\r\n            language: data[key].show.language,\r\n            genre: data[key].show.genres[0],\r\n          })\r\n        } else {\r\n          searchResults.push({\r\n            id: data[key].show.id,\r\n            title: data[key].show.name,\r\n            image: noImage,\r\n            summary: data[key].show.summary,\r\n            rating: data[key].show.rating.average,\r\n            language: data[key].show.language,\r\n            genre: data[key].show.genres[0],\r\n          })\r\n        }\r\n      }\r\n      this.setState({\r\n        relevantShows: searchResults,\r\n      })\r\n      // If error received, show user error tile by adding error tile to state\r\n    }, (error) => {\r\n      console.log('Error:', error)\r\n      const searchResults = [];\r\n      searchResults.push({\r\n        id: 1,\r\n        title: \"Sorry, no result/error received.\",\r\n        image: noImage,\r\n        summary: \"N/A\",\r\n        rating: \"N/A\",\r\n        language: \"N/A\",\r\n        genre: \"N/A\",\r\n      })\r\n      this.setState({\r\n        relevantShows: searchResults,\r\n      })\r\n    });\r\n  }\r\n\r\n  // Hide/expose slider with list of shows\r\n  showMyLists =() => {\r\n    document.querySelector('section.slider').classList.toggle('show');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <header>\r\n          <div className=\"hamburgerMenu\">\r\n            <FontAwesomeIcon icon={faBars} onClick={this.showMyLists}/>\r\n          </div>\r\n          <div className=\"headerContent\">\r\n            <h1 className=\"flash\">My Watchlist</h1>\r\n            <SearchBar callApi={this.callApi} />\r\n          </div>\r\n        </header>\r\n        <section className=\"slider\">\r\n          <Slider />\r\n        </section>\r\n        <section className='gallery wrapper'>\r\n          <Gallery relevantShows={this.state.relevantShows} />\r\n        </section>\r\n        <footer><p><a href=\"https://ruiwd.me\">Rui Wang-Dong</a>, <a href=\"https://lawrencehebia.com\">Lawrence Hebia</a>, <a href=\"http://www.shondamoshis.com\">Shonda Moshis</a>, <a href=\"http://www.tabithapoeze.com\">Tabitha Poeze</a> &copy; 2020</p></footer>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}