{"version":3,"sources":["SearchBar.js","Slider.js","Gallery.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleChange","e","setState","userInput","target","value","handleSubmit","preventDefault","props","callApi","state","onSubmit","this","action","htmlFor","onChange","name","type","Component","Slider","className","Gallery","relevantShows","map","show","key","id","src","image","alt","title","App","search","axios","method","url","responseType","params","q","then","res","data","searchResults","push","medium","summary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gSAoCeA,G,wDAjCX,aAAe,IAAD,8BACV,gBAMJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,UAAWF,EAAEG,OAAOC,SATd,EAadC,aAAe,SAACL,GACZA,EAAEM,iBAEF,EAAKC,MAAMC,QAAQ,EAAKC,MAAMP,YAd9B,EAAKO,MAAQ,CACTP,UAAW,IAHL,E,qDAoBV,OACI,6BACI,0BAAMQ,SAAUC,KAAKN,aAAcO,OAAO,UACtC,2BAAQC,QAAQ,gBAAhB,2BACA,2BAAOT,MAAOO,KAAKF,MAAMP,UAAWY,SAAUH,KAAKZ,aAAcgB,KAAK,eAAcC,KAAK,SACzF,gD,GA1BIC,cCWTC,G,6KARX,OACE,wBAAIC,UAAU,iB,GAHCF,cCkBNG,E,uKAhBP,OACI,wBAAID,UAAU,gBACRR,KAAKJ,MAAMc,cAAcC,KAAI,SAACC,GAC5B,OACI,4BAAI,4BAAQJ,UAAU,cAAcK,IAAKD,EAAKE,IAC1C,yBAAKC,IAAKH,EAAKI,MAAOC,IAAG,qBAAgBL,EAAKM,SAC9C,uBAAGV,UAAU,YAAYI,EAAKM,iB,GARpCZ,aCyDPa,E,kDAnDb,aAAe,IAAD,8BACZ,gBAUFtB,QAAU,SAACuB,GACTC,IAAM,CACJC,OAAQ,MACRC,IAAK,qCACLC,aAAc,OACdC,OAAQ,CACNC,EAAGN,KAEJO,MAAK,SAACC,GACP,IAAMC,EAAOD,EAAIC,KAEXC,EAAgB,GAEtB,IAAK,IAAIjB,KAAOgB,EACdC,EAAcC,KAAK,CACjBjB,GAAIe,EAAKhB,GAAKD,KAAKE,GACnBI,MAAOW,EAAKhB,GAAKD,KAAKR,KACtBY,MAAOa,EAAKhB,GAAKD,KAAKI,MAAMgB,OAC5BC,QAASJ,EAAKhB,GAAKD,KAAKqB,UAI5B,EAAK3C,SAAS,CACZoB,cAAeoB,QAhCnB,EAAKhC,MAAQ,CACXY,cAAe,IAHL,E,gEAQZV,KAAKH,QAAQ,Y,+BAgCb,OACE,yBAAKW,UAAU,OACb,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWX,QAASG,KAAKH,UACzB,kBAAC,EAAD,CAASa,cAAeV,KAAKF,MAAMY,qB,GA/CzBJ,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbd8b154.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass SearchBar extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userInput: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.callApi(this.state.userInput);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} action=\"submit\">\r\n                    <label  htmlFor=\"searchByName\">Search TV Show By Name:</label>\r\n                    <input value={this.state.userInput} onChange={this.handleChange} name=\"searchByName\"type=\"text\"/>\r\n                    <button>Search</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\r\nimport firebase from 'firebase';\r\n\r\nclass Slider extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"showList\">\r\n        \r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Gallery extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"searchResuts\">\r\n                { this.props.relevantShows.map((show) => {\r\n                    return (\r\n                        <li><button className=\"tvImgButton\" key={show.id}>\r\n                            <img src={show.image} alt={`Poster for ${show.title}`}></img>\r\n                            <p className=\"tv Title\">{show.title}</p>\r\n                        </button></li>\r\n\r\n                    )\r\n                })   \r\n                } \r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default Gallery;\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport SearchBar from './SearchBar';\r\nimport Slider from './Slider';\r\nimport Gallery from './Gallery';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      relevantShows: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callApi('dragon');\r\n  }\r\n\r\n  callApi = (search) => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"http://api.tvmaze.com/search/shows\",\r\n      responseType: \"json\",\r\n      params: {\r\n        q: search,\r\n      },\r\n    }).then((res) => {\r\n      const data = res.data;\r\n\r\n      const searchResults = [];\r\n\r\n      for (let key in data) {\r\n        searchResults.push({\r\n          id: data[key].show.id,\r\n          title: data[key].show.name,\r\n          image: data[key].show.image.medium,\r\n          summary: data[key].show.summary\r\n        })\r\n      }\r\n\r\n      this.setState({\r\n        relevantShows: searchResults,\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>My Watchlist</h1>\r\n        <Slider />\r\n        <SearchBar callApi={this.callApi}/>\r\n        <Gallery relevantShows={this.state.relevantShows}></Gallery>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}