{"version":3,"sources":["assets/noImage.jpg","Components/SearchBar.js","Components/firebase.js","Components/CreateList.js","Components/VoteButtons.js","Components/Slider.js","Components/AddTitle.js","Components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","handleChange","e","setState","userInput","target","value","handleSubmit","preventDefault","props","callApi","state","className","onSubmit","this","action","htmlFor","onChange","name","type","placeholder","icon","faSearch","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CreateList","createList","database","ref","inputTitle","push","rating","title","inputRating","VoteButtons","handleUpvote","currentRating","listTitle","child","showKey","newData","on","response","data","val","set","handleDownvote","onClick","faArrowCircleUp","faArrowCircleDown","Slider","myListTitles","myLists","listTitlePush","showPush","key","next","actualListTitle","listTitleRecord","map","s","expandList","faPlus","item","AddTitle","handleClick","document","querySelector","show","classList","toggle","showTitle","selectedList","dbRef","listTitleArray","length","selected","disabled","Gallery","relevantShows","id","src","image","alt","showRating","App","search","axios","method","url","responseType","params","q","then","res","searchResults","medium","summary","average","noImage","showMyLists","faBars","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0524e23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImage.aaa9fb02.jpg\";","import React, {Component} from 'react';\r\n\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass SearchBar extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            userInput: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.callApi(this.state.userInput);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form className='showTitleSearch' onSubmit={this.handleSubmit} action=\"submit\">\r\n                    <label className='sr-only' htmlFor=\"searchByName\">Search TV Show By Name:</label>\r\n                    <input value={this.state.userInput} onChange={this.handleChange} name=\"searchByName\" type=\"text\" placeholder=\"Search TV Show By Name\"/>\r\n                    <button className=\"inputButton\"><FontAwesomeIcon icon={faSearch} /></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig ={\r\n  apiKey: \"AIzaSyBCUsX2ILvXh1sITHinQJ9PHk5nGiJ90fM\",\r\n  authDomain: \"binge-watch-list.firebaseapp.com\",\r\n  databaseURL: \"https://binge-watch-list.firebaseio.com\",\r\n  projectId: \"binge-watch-list\",\r\n  storageBucket: \"binge-watch-list.appspot.com\",\r\n  messagingSenderId: \"665131961000\",\r\n  appId: \"1:665131961000:web:23bbca1d60f97622fad09d\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n\r\n","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass CreateList extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      inputTitle:'',\r\n      inputRating:''\r\n    }\r\n  }\r\n  \r\n  createList = (e) => {\r\n    e.preventDefault();\r\n\r\n    const createdList = firebase.database().ref(this.state.inputTitle);\r\n    createdList.push({\r\n      rating: 'You get to select your rating!',\r\n      title: 'Start adding in your shows!'\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <form className='createList' onSubmit={this.createList} action=\"submit\">\r\n        <input name=\"inputTitle\" className='createList' placeholder=\"Name your new list\" onChange={this.handleChange} value={this.state.inputTitle} type=\"text\"/>\r\n        <button className=\"inputButton\">Create List</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CreateList;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase';\r\n\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowCircleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { faArrowCircleDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass VoteButtons extends Component {\r\n\r\n  handleUpvote  = () => {\r\n    const currentRating = firebase.database().ref(this.props.listTitle).child(this.props.showKey).child('rating');\r\n\r\n    let newData = null;\r\n\r\n    currentRating.on('value', (response) => {\r\n        let data = response.val();\r\n        newData = data+1;\r\n    })\r\n    \r\n    currentRating.set(newData)    \r\n  }\r\n\r\n  \r\n  handleDownvote = () => {\r\n    const currentRating = firebase.database().ref(this.props.listTitle).child(this.props.showKey).child('rating');\r\n\r\n    let newData = null;\r\n\r\n    currentRating.on('value', (response) => {\r\n        let data = response.val();\r\n        newData = data - 1;\r\n    })\r\n\r\n    currentRating.set(newData)\r\n  }\r\n\r\n  \r\n  render() {\r\n    return(\r\n        <Fragment>\r\n        <button className='upvote' onClick={this.handleUpvote}><FontAwesomeIcon icon={faArrowCircleUp} /></button>\r\n        <button className='downvote' onClick={this.handleDownvote}><FontAwesomeIcon icon={faArrowCircleDown} /></button>\r\n        </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VoteButtons;","import React, {Component, Fragment} from 'react';\r\nimport firebase from './firebase';\r\nimport CreateList from './CreateList';\r\nimport VoteButtons from './VoteButtons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\n// import { findAllByPlaceholderText } from '@testing-library/react';\r\n\r\nclass Slider extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      myListTitles:[],\r\n      myLists:[]\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (response) => {\r\n\r\n      const data = response.val();\r\n\r\n      const listTitlePush = [];\r\n\r\n      const showPush = [];\r\n\r\n      for (let key in data) {\r\n        let listTitle = key\r\n        let next = data[key]\r\n          listTitlePush.push({\r\n            actualListTitle: listTitle,\r\n          })\r\n        for (let key in next) {\r\n          showPush.push({\r\n            listTitleRecord: listTitle,\r\n            title: next[key]['title'],\r\n            rating: next[key]['rating'],\r\n            showKey: key\r\n          })\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        myListTitles: listTitlePush,\r\n        myLists: showPush,\r\n      })\r\n    })\r\n  }  \r\n\r\n  // expandList = () => {\r\n  //   document.querySelectorAll(`li.`)\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h2 className=\"sliderTitle\">My TV Show Lists</h2>\r\n        {this.state.myListTitles.map((s) => {\r\n          return (\r\n            <div className=\"sliderList\">\r\n              <div className=\"listTitleContainer\">\r\n                <h2>{s.actualListTitle}</h2>\r\n                <button className=\"expandList\" onClick={this.expandList}><FontAwesomeIcon icon={faPlus} /></button>\r\n              </div>\r\n              {this.state.myLists.map((item) => {\r\n                if (item.listTitleRecord === s.actualListTitle) {\r\n                  return (\r\n                    <li className={`listItem ${s.actualListTitle}`}>\r\n                      <h3>{item.title}</h3>\r\n                      <p>{item.rating}</p>\r\n                      <VoteButtons showKey={item.showKey} listTitle={s.actualListTitle}/>\r\n                    </li>\r\n                  )\r\n                }\r\n              })}\r\n            </div>  \r\n          )\r\n        })}\r\n        <CreateList />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slider;","import React,{Component} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass AddTitle extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state={\r\n      myListTitles: [],\r\n      selectedList: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    const listTitleArray = [];\r\n\r\n    dbRef.on('value', (response) => {\r\n      listTitleArray.length = 0;\r\n\r\n      const data = response.val();\r\n      for (let key in data) {\r\n        listTitleArray.push({\r\n          listTitle: key\r\n        })\r\n      }\r\n      \r\n      this.setState({\r\n        myListTitles: listTitleArray\r\n      })\r\n    })  \r\n  }\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    \r\n    document.querySelector(`.selectList.${this.props.show.title}`).classList.toggle('show')\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.value !== '') {\r\n    const pushedList = firebase.database().ref(e.target.value)\r\n      pushedList.push({\r\n        rating: 0,\r\n        title: this.props.showTitle\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <form>\r\n        {/* <button onClick={this.handleClick}>&#43;</button> */}\r\n        {/* ^^ Do we need this button?  */}\r\n        <select className={''} onChange={this.handleChange}>\r\n        <option selected disabled value={''}>Add to List</option>    \r\n          {this.state.myListTitles.map((item) => {\r\n              return (\r\n                <option value={item.listTitle}>{item.listTitle}</option>\r\n              )\r\n            })\r\n          }\r\n        </select>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTitle;","import React, { Component } from 'react';\r\nimport '../styles/Sass/App.scss';\r\nimport AddTitle from './AddTitle';\r\n\r\nclass Gallery extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"searchResuts\">\r\n                { this.props.relevantShows.map((show) => {\r\n                    return (\r\n                        <li key={show.id}>\r\n                            {/* Do we need this button?? It doesn't appear to be used. */}\r\n                            {/* <button className=\"tvImgButton\"> */}\r\n                                <img src={show.image} alt={`Poster for ${show.title}`}></img>\r\n                                <p className=\"tv Title\">{show.title}</p>\r\n                            {/* </button> */}\r\n                            <AddTitle showTitle={show.title} showRating={show.rating} />\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default Gallery;\r\n\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport './styles/Sass/App.scss';\r\nimport SearchBar from './Components/SearchBar'\r\nimport Slider from './Components/Slider';\r\nimport Gallery from './Components/Gallery';\r\nimport noImage from './assets/noImage.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      relevantShows: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.callApi('dragon');\r\n  }\r\n\r\n  callApi = (search) => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"https://api.tvmaze.com/search/shows\",\r\n      responseType: \"json\",\r\n      params: {\r\n        q: search,\r\n      },\r\n    }).then((res) => {\r\n      const data = res.data;\r\n\r\n      const searchResults = [];\r\n\r\n      for (let key in data) {\r\n        if(data[key].show.image !== null) {\r\n          searchResults.push({\r\n            id: data[key].show.id,\r\n            title: data[key].show.name,\r\n            image: data[key].show.image.medium,\r\n            summary: data[key].show.summary,\r\n            rating: data[key].show.rating.average\r\n          })\r\n        } else {\r\n          searchResults.push({\r\n            id: data[key].show.id,\r\n            title: data[key].show.name,\r\n            image: noImage,\r\n            summary: data[key].show.summary,\r\n            rating: data[key].show.rating.average\r\n          })\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        relevantShows: searchResults,\r\n      })\r\n    });\r\n  }\r\n\r\n  showMyLists =() => {\r\n    document.querySelector('section.slider').classList.toggle('show')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <header>\r\n          <FontAwesomeIcon icon={faBars} className=\"hamburgerMenu\" onClick={this.showMyLists}/>\r\n          <div className=\"wrapper\">\r\n            <h1 className=\"flash\">My Watchlist</h1>\r\n            <SearchBar callApi={this.callApi} />\r\n          </div>\r\n        </header>\r\n        <section className=\"slider\">\r\n          <Slider />\r\n        </section>\r\n        <section className='gallery wrapper'>\r\n          <Gallery relevantShows={this.state.relevantShows} />\r\n        </section>\r\n        <footer><p><a href=\"https://ruiwd.me\">Jerry Dong</a>, <a href=\"https://lawrencehebia.com\">Lawrence Hebia</a>, <a href=\"http://www.shondamoshis.com\">Shonda Moshis</a>, <a href=\"http://www.tabithapoeze.com\">Tabitha Poeze</a> &copy; 2020</p></footer>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}